- name: Local user mutual SSH trust based on host in a.txt
  hosts: wcp
  become: yes

  vars:
    user_info_file: "/path/to/a.txt"

  tasks:
    - name: Copy a.txt to the target host
      copy:
        src: "/path/to/a.txt"  # 这里是控制节点上的路径
        dest: "/tmp/a.txt"     # 目标主机上保存的路径
      when: inventory_hostname == 'wcp'  # 只在wcp主机上执行

    - name: Read user info file from target host
      slurp:
        src: "/tmp/a.txt"  # 这里是目标主机上的路径
      register: user_info_raw

    - name: Parse user info lines into structured data
      set_fact:
        user_info_list: >-
          {{
            user_info_raw.content | b64decode | splitlines() 
            | map('split', ',') | list
          }}

- name: Extract host-specific user list
  set_fact:
    host_users: >-
      {{
        user_info_list 
        | selectattr("0", "==", inventory_hostname)
        | map("lambda x: x[1:]")  # 替代slice的兼容写法
        | flatten
      }}
  vars:
    inventory_hostname: "{{ ansible_hostname }}"  # 确保主机名变量正确

    - name: Build users dictionary with mutual relationships
      set_fact:
        users: "{{ users | default({}) | combine({item: other_users}) }}"
      loop: "{{ host_users }}"
      vars:
        other_users: "{{ host_users | reject('equalto', item) | list }}"

    - name: Debug show filtered users
      debug:
        var: users

    - name: Ensure .ssh directory for each user
      file:
        path: "/home/{{ item }}/.ssh"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0700'
      loop: "{{ users.keys() | list }}"

    - name: Generate ssh key if not exists
      become_user: "{{ item }}"
      shell: ssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa <<< y
      args:
        creates: "/home/{{ item }}/.ssh/id_rsa"
      loop: "{{ users.keys() | list }}"

    - name: Read all public keys into a dictionary
      slurp:
        src: "/home/{{ item }}/.ssh/id_rsa.pub"
      register: user_keys
      loop: "{{ users.keys() | list }}"

    - name: Build pub_keys dict {username: pubkey}
      set_fact:
        pub_keys: >-
          {{ pub_keys | default({}) | combine({ (item.item): (item.content | b64decode) }) }}
      loop: "{{ user_keys.results }}"

    - name: Inject related pubkeys into authorized_keys
      authorized_key:
        user: "{{ current_user }}"
        key: "{{ pub_keys[related_user] }}"
        manage_dir: no
        state: present
      loop: "{{ users | dict2items | subelements('value') }}"
      vars:
        current_user: "{{ item.0.key }}"
        related_user: "{{ item.1 }}"
      when: 
        - related_user != current_user
        - related_user in pub_keys
