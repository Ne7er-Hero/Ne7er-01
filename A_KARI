package com.example.demo.filter;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Iterator;

@Component 
public class ApiFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(ApiFilter.class);

    @Override
    public void init(FilterConfig filterConfig) throws ServletException {
        // 
    }

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {
        HttpServletRequest httpReq = (HttpServletRequest) request;
        HttpServletResponse httpRes = (HttpServletResponse) response;

        String uri = httpReq.getServletPath().substring(1);
        String[] accessibleArray = uri.split("/");
        Iterator<String> keys = InitMain.METHOD.getKeys("api");
        boolean checkUri = false;

        while (keys.hasNext()) {
            String key = keys.next();
            String[] propUrlArray = InitMain.METHOD.getStringArray(key)[1].split("/");
            checkUri = this.checkUri(accessibleArray, propUrlArray);

            if (checkUri) {
                String methodType = InitMain.METHOD.getStringArray(key)[0];
                String[] methodTypeArray = methodType.split("_");

                boolean methodCheck = Arrays.stream(methodTypeArray)
                                            .anyMatch(mt -> httpReq.getMethod().equals(mt));

                if (!methodCheck) {
                    CodeBean bean = ErrCodeUtils.getInstance()
                            .getCode(Constant.ERR_24, "", methodType.replace("_", "/"), httpReq.getMethod());
                    logger.error(bean.getMessage());
                    String json = ReturnJsonUtils.setErrorMessage(bean);
                    this.end(httpRes, bean.getHttpCode(), json);
                    return;
                }
                break;
            }
        }

        if (!checkUri) {
            CodeBean bean = ErrCodeUtils.getInstance().getCode(Constant.ERR_23, "");
            logger.error(bean.getMessage());
            String json = ReturnJsonUtils.setErrorMessage(bean);
            this.end(httpRes, bean.getHttpCode(), json);
            return;
        }


        chain.doFilter(request, response);
    }

    @Override
    public void destroy() {

    }

    private void end(HttpServletResponse response, int httpCode, String json) throws IOException {
        response.setStatus(httpCode);
        response.setContentType("application/json;charset=UTF-8");
        try (PrintWriter writer = response.getWriter()) {
            writer.write(json);
            writer.flush();
        }
    }

    private boolean checkUri(String[] accessibleArray, String[] propUrlArray) {
        if (accessibleArray.length != propUrlArray.length) {
            return false;
        }
        for (int i = 0; i < accessibleArray.length; i++) {
            if (!propUrlArray[i].equals("*") && !propUrlArray[i].equals(accessibleArray[i])) {
                return false;
            }
        }
        return true;
    }
}
