- name: Setup SSH key-based authentication between users
  hosts: localhost
  gather_facts: no
  vars_files:
    - ssh_map.yml

  tasks:
    - name: Loop over all ssh pairs
      include_tasks: ssh_setup_task.yml
      loop: "{{ ssh_pairs }}"
      loop_control:
        loop_var: ssh_item


ssh_pairs:
  - ['wcp', 'wcp1', 'c1pa1tdt', 'c1pn1tdt'] 
  - ['wcp', 'wcp1', 'c1po1tdt', 'c1pn1tdt'] 
  - ['wcp', 'wcp1', 'c1pn1tdt', 'c1pa1tdt']


- name: Set facts from ssh pair
  set_fact:
    from_host: "{{ ssh_item[0] }}"
    to_host: "{{ ssh_item[1] }}"
    from_user: "{{ ssh_item[2] }}"
    to_user: "{{ ssh_item[3] }}"

- name: Ensure {{ from_user }} has SSH key
  delegate_to: "{{ from_host }}"
  become: true
  become_user: "{{ from_user }}"
  shell: |
    if [ ! -f ~/.ssh/id_rsa ]; then
      ssh-keygen -t rsa -f ~/.ssh/id_rsa -N '';
    fi
  args:
    executable: /bin/bash

- name: Fetch public key from {{ from_user }}@{{ from_host }}
  delegate_to: "{{ from_host }}"
  become: true
  become_user: "{{ from_user }}"
  slurp:
    src: ~/.ssh/id_rsa.pub
  register: pubkey_data

- name: Install pubkey into {{ to_user }}@{{ to_host }}
  delegate_to: "{{ to_host }}"
  become: true
  become_user: "{{ to_user }}"
  authorized_key:
    user: "{{ to_user }}"
    key: "{{ pubkey_data.content | b64decode }}"
