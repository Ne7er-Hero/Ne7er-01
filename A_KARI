@Override
public void doFilter(ServletRequest paramServletRequest, ServletResponse paramServletResponse, FilterChain paramFilterChain)
        throws IOException, ServletException {

    HttpServletRequest request = (HttpServletRequest) paramServletRequest;
    HttpServletResponse response = (HttpServletResponse) paramServletResponse;

    String uri = request.getServletPath().substring(1);
    String[] accessibleArray = uri.split("/");
    Iterator<String> keys = InitMain.METHOD.getKeys("api");
    boolean checkUri = false;

    logger.info("=== ApiFilter 调试日志 ===");
    logger.info("RequestURI     = {}", request.getRequestURI());
    logger.info("ContextPath    = {}", request.getContextPath());
    logger.info("ServletPath    = {}", request.getServletPath());
    logger.info("Split URI      = {}", Arrays.toString(accessibleArray));

    while (keys.hasNext()) {
        String key = keys.next();
        String[] propUrlArray = InitMain.METHOD.getStringArray(key)[1].split("/");

        logger.info("Checking key [{}], Config URL = {}, Split Config = {}",
                key, InitMain.METHOD.getStringArray(key)[1], Arrays.toString(propUrlArray));

        checkUri = this.checkUri(accessibleArray, propUrlArray);

        logger.info("checkUri result for key [{}] = {}", key, checkUri);

        if (checkUri) {
            String methodType = InitMain.METHOD.getStringArray(key)[0];
            String[] methodTypeArray = methodType.split("_");

            boolean methodCheck = Arrays.stream(methodTypeArray)
                                        .anyMatch(mt -> request.getMethod().equals(mt));

            if (!methodCheck) {
                CodeBean bean = ErrCodeUtils.getInstance()
                        .getCode(Constant.ERR_24, "", methodType.replace("_", "/"), request.getMethod());
                logger.error("Method not allowed: {}", bean.getMessage(), request);
                String json = ReturnJsonUtils.setErrorMessage(bean);
                this.end(response, bean.getHttpCode(), json);
                return;
            }
            break;
        }
    }

    if (!checkUri) {
        CodeBean bean = ErrCodeUtils.getInstance().getCode(Constant.ERR_23, "");
        logger.error("No matching URI found: {}", bean.getMessage(), request);
        String json = ReturnJsonUtils.setErrorMessage(bean);
        this.end(response, bean.getHttpCode(), json);
        return;
    }

    paramFilterChain.doFilter(paramServletRequest, paramServletResponse);
}
