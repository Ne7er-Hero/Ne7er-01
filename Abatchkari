boolean checkUri = false;

while (keys.hasNext()) {
    String key = keys.next();
    String[] propUrlArray = InitMain.METHOD.getStringArray(key)[1].split("/");

    logger.error("Checking key [{}], Config URL = {} , Split Config = {}",
        key, InitMain.METHOD.getStringArray(key)[1], Arrays.toString(propUrlArray));

    boolean currentCheck = this.checkUrl(accessUrlArray, propUrlArray);
    logger.error("CurrentCheck result for key [{}] = {}", key, currentCheck);

    if (currentCheck) {
        checkUri = true;

        String methodType = InitMain.METHOD.getStringArray(key)[0];
        String[] methodTypeArray = methodType.split("_");
        boolean methodCheck = false;

        for (String mt : methodTypeArray) {
            if (request.getMethod().equals(mt)) {
                methodCheck = true;
                break;
            }
        }

        if (!methodCheck) {
            CodeBean bean = ErrCodeUtils.getInstance()
                    .getCode(Constant.ERR_24, "", methodType.replace("_", "/"), request.getMethod());
            logger.error(bean.getMessage(), request);

            String json = ReturnJsonUtils.setErrorMessage(bean);
            this.end(response, bean.getHttpCode(), json);
            return;
        }

        break; // ✅ 匹配到了就退出 while
    }
}

// ✅ 循环跑完后再检查
if (!checkUri) {
    CodeBean bean = ErrCodeUtils.getInstance().getCode(Constant.ERR_23, "");
    logger.error("No matching URI found: {}", bean.getMessage(), request);
    String json = ReturnJsonUtils.setErrorMessage(bean);
    this.end(response, bean.getHttpCode(), json);
    return;
}
