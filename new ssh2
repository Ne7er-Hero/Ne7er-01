- name: Local user mutual SSH trust based on host in a.txt
  hosts: wcp
  become: yes

  vars:
    user_info_file: "/path/to/a.txt"  # 本地控制节点上 a.txt 的路径

  tasks:
    - name: Copy a.txt to the target host
      copy:
        src: "{{ user_info_file }}"
        dest: "/tmp/a.txt"
      when: inventory_hostname == 'wcp'

    - name: Read user info file from target host
      slurp:
        src: "/tmp/a.txt"
      register: user_info_raw

    - name: Parse user info lines into structured data
      set_fact:
        user_info_list: >-
          {{
            user_info_raw.content | b64decode | splitlines()
            | map('split', ',') | list
          }}

    - name: Initialize users and pubkey_paths dictionaries
      set_fact:
        users: {}
        pubkey_paths: {}

    - name: Process each line of user info
      set_fact:
        # Append each user's info to the dictionary incrementally
        users: "{{ users | combine({ item[1]: item[2:] }) }}"
        pubkey_paths: "{{ pubkey_paths | combine({ item[1]: '/home/' + item[2] + '/.ssh/id_rsa.pub' }) }}"
      loop: "{{ user_info_list }}"

    - name: Debug show users structure
      debug:
        var: users

    - name: Debug show pubkey_paths structure
      debug:
        var: pubkey_paths

    - name: Ensure .ssh directory exists for each user
      file:
        path: "/home/{{ item[0:6] }}/{{ item }}/.ssh"
        state: directory
        owner: "{{ item }}"
        group: "{{ item }}"
        mode: '0700'
      loop: "{{ users.keys() | list }}"

    - name: Generate SSH key if not exists
      become_user: "{{ item }}"
      shell: ssh-keygen -t rsa -N '' -f /home/{{ item[0:6] }}/{{ item }}/.ssh/id_rsa <<< y
      args:
        creates: "/home/{{ item[0:6] }}/{{ item }}/.ssh/id_rsa.pub"  # 检查公钥文件是否存在
      loop: "{{ users.keys() | list }}"

    - name: Read all public keys into a dictionary
      slurp:
        src: "{{ pubkey_paths[item] }}"
      register: user_keys
      loop: "{{ pubkey_paths.keys() | list }}"

    - name: Build pub_keys dict {username: pubkey}
      set_fact:
        pub_keys: >-
          {{
            pub_keys | default({})
            | combine({ item.item: (item.content | b64decode) })
          }}
      loop: "{{ user_keys.results }}"

    - name: Inject related pubkeys into authorized_keys
      authorized_key:
        user: "{{ current_user }}"
        key: "{{ pub_keys[related_user] }}"
        manage_dir: no
        state: present
      loop: "{{ users | dict2items | subelements('value') }}"
      vars:
        current_user: "{{ item.0.key }}"
        related_user: "{{ item.1 }}"
      when:
        - related_user != current_user
        - related_user in pub_keys
