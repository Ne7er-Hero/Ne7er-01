@Override
public void doFilter(ServletRequest paramServletRequest, ServletResponse paramServletResponse, FilterChain paramFilterChain)
        throws IOException, ServletException {

    HttpServletRequest request = (HttpServletRequest) paramServletRequest;
    HttpServletResponse response = (HttpServletResponse) paramServletResponse;

    // 去掉前导/，拆分路径
    String uri = request.getServletPath();
    if (uri.startsWith("/")) {
        uri = uri.substring(1);
    }
    String[] accessibleArray = Arrays.stream(uri.split("/"))
                                     .map(String::trim)
                                     .toArray(String[]::new);

    Iterator<String> keys = InitMain.METHOD.getKeys("api");
    boolean checkUri = false;

    logger.info("=== ApiFilter 调试日志 ===");
    logger.info("RequestURI     = {}", request.getRequestURI());
    logger.info("ContextPath    = {}", request.getContextPath());
    logger.info("ServletPath    = {}", request.getServletPath());
    logger.info("Split URI      = {}", Arrays.toString(accessibleArray));

    while (keys.hasNext()) {
        String key = keys.next();
        String configUrl = InitMain.METHOD.getStringArray(key)[1].trim();
        if (configUrl.startsWith("/")) {
            configUrl = configUrl.substring(1);
        }
        String[] propUrlArray = Arrays.stream(configUrl.split("/"))
                                      .map(String::trim)
                                      .toArray(String[]::new);

        logger.info("Checking key [{}], Config URL = {}, Split Config = {}",
                key, configUrl, Arrays.toString(propUrlArray));

        checkUri = this.checkUri(accessibleArray, propUrlArray);
        logger.info("checkUri result for key [{}] = {}", key, checkUri);

        if (checkUri) {
            String methodType = InitMain.METHOD.getStringArray(key)[0].trim();
            String[] methodTypeArray = methodType.split("_");

            boolean methodCheck = Arrays.stream(methodTypeArray)
                                        .anyMatch(mt -> request.getMethod().equals(mt));

            if (!methodCheck) {
                CodeBean bean = ErrCodeUtils.getInstance()
                        .getCode(Constant.ERR_24, "", methodType.replace("_", "/"), request.getMethod());
                logger.error("Method not allowed: {}", bean.getMessage(), request);
                String json = ReturnJsonUtils.setErrorMessage(bean);
                this.end(response, bean.getHttpCode(), json);
                return;
            }
            break; // 已匹配成功，跳出循环
        }
    }

    if (!checkUri) {
        CodeBean bean = ErrCodeUtils.getInstance().getCode(Constant.ERR_23, "");
        logger.error("No matching URI found: {}", bean.getMessage(), request);
        String json = ReturnJsonUtils.setErrorMessage(bean);
        this.end(response, bean.getHttpCode(), json);
        return;
    }

    paramFilterChain.doFilter(paramServletRequest, paramServletResponse);
}

/**
 * 检查请求路径是否匹配配置路径
 * 支持通配符 "*"，会忽略空格
 */
private boolean checkUri(String[] target, String[] whiteList) {
    if (target.length != whiteList.length) {
        logger.error("Length mismatch: target={}, whiteList={}", target.length, whiteList.length);
        return false;
    }

    for (int i = 0; i < whiteList.length; i++) {
        String t = target[i].trim();
        String w = whiteList[i].trim();

        logger.debug("Compare index {}: target='{}', whiteList='{}'", i, t, w);

        if ("*".equals(w)) {
            if (t.isEmpty()) {
                logger.error("Fail at index {}: whitelist='*' but target is empty", i);
                return false;
            }
            continue;
        }

        if (!t.equals(w)) {
            logger.error("Fail at index {}: mismatch target='{}', whiteList='{}'", i, t, w);
            return false;
        }
    }

    return true;
}











private boolean checkUri(String[] target, String[] whiteList) {
    if (target.length == 0 || whiteList.length == 0) {
        return false;
    }

    // 只比较最后一个元素
    String lastTarget = target[target.length - 1].trim();
    String lastWhite = whiteList[whiteList.length - 1].trim();

    logger.info("Comparing last segment: target='{}', whiteList='{}'", lastTarget, lastWhite);

    if ("*".equals(lastWhite)) {
        return !lastTarget.isEmpty();
    }

    return lastTarget.equals(lastWhite);
}

